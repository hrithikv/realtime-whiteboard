#!/usr/bin/env node


var app = require('../app');
var debug = require('debug')('realtime-whiteboard:server');
var http = require('http');


var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);

server.listen(port, function(){
  console.log("listening on port 3000")
});
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io').listen(server.listen(port));

io.sockets.on("connection", function (socket) {

  socket.on('draw', function (data) {
    console.log("on draw from the server")
    io.emit('draw', data);
  });

  socket.on('chat message', function(message){
    io.emit('chat message', message);
  });

  // Listen and emit that user joined
  socket.on('user joined', function(user) {
    io.emit('user joined', user)
  })
})

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
